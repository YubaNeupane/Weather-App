{"version":3,"sources":["Forcast.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","display","flexWrap","justifyContent","overflow","backgroundColor","marginTop","gridList","transform","height","title","fontSize","marginBottom","color","palette","primary","light","subtitle","titleBar","background","gridTileStyle","Forcast","classes","className","GridList","cols","GridListTile","src","alt","GridListTileBar","api","App","useState","quary","setQuery","weather","setWeather","setLocation","showPosition","position","temp","lat","coords","latitude","lon","longitude","fetch","then","res","json","result","useEffect","window","navigator","geolocation","getCurrentPosition","getData","main","console","log","placeholder","type","onChange","e","target","value","onKeyPress","evt","key","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Math","round","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7344eca2.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport GridList from '@material-ui/core/GridList';\r\nimport GridListTile from '@material-ui/core/GridListTile';\r\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    justifyContent: 'space-around',\r\n    overflow: 'hidden',\r\n    backgroundColor: 'rbga(0,0,0,0)',\r\n    marginTop:80,\r\n    \r\n  },\r\n  gridList: {\r\n    flexWrap: 'nowrap',\r\n    // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\r\n    transform: 'translateZ(0)',\r\n    height:200,\r\n  },\r\n  title: {\r\n    fontSize:'20px',\r\n    marginBottom:5,\r\n    color: theme.palette.primary.light,\r\n  },\r\n  subtitle:{\r\n    fontSize:'15px',\r\n  },\r\n  titleBar: {\r\n    \r\n    background:\r\n      'linear-gradient(to top, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)',\r\n  },\r\n  gridTileStyle:{\r\n      height:100 \r\n  }\r\n}));\r\n\r\n/**\r\n * The example data is structured as follows:\r\n *\r\n * import image from 'path/to/image.jpg';\r\n * [etc...]\r\n *\r\n * const tileData = [\r\n *   {\r\n *     img: image,\r\n *     title: 'Image',\r\n *     author: 'author',\r\n *   },\r\n *   {\r\n *     [etc...]\r\n *   },\r\n * ];\r\n */\r\nexport default function Forcast() {\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <GridList className={classes.gridList} cols={2.5}>\r\n        {/* {tileData.map((tile) => (\r\n          <GridListTile key={tile.img}>\r\n            <img src={tile.img} alt={tile.title} />\r\n            <GridListTileBar\r\n              title={tile.title}\r\n              classes={{\r\n                root: classes.titleBar,\r\n                title: classes.title,\r\n              }}\r\n            />\r\n          </GridListTile>\r\n        ))} */}\r\n        <GridListTile>\r\n            <img src='https://www.publicdomainpictures.net/pictures/320000/velka/background-image.png' alt='adawdwadawd' />\r\n            <GridListTileBar\r\n              title={'75'}\r\n              subtitle={'SUNNY'}\r\n              classes={{\r\n                root: classes.titleBar,\r\n                title: classes.title,\r\n                subtitle:classes.subtitle\r\n              }}\r\n            />\r\n        </GridListTile>\r\n        <GridListTile>\r\n            <img src='https://www.publicdomainpictures.net/pictures/320000/velka/background-image.png' alt='adawdwadawd' />\r\n            <GridListTileBar\r\n              title={'75'}\r\n              subtitle={'SUNNY'}\r\n              classes={{\r\n                root: classes.titleBar,\r\n                title: classes.title,\r\n                subtitle:classes.subtitle\r\n              }}\r\n            />\r\n        </GridListTile>\r\n        <GridListTile>\r\n            <img src='https://www.publicdomainpictures.net/pictures/320000/velka/background-image.png' alt='adawdwadawd' />\r\n            <GridListTileBar\r\n              title={'75'}\r\n              subtitle={'SUNNY'}\r\n              classes={{\r\n                root: classes.titleBar,\r\n                title: classes.title,\r\n                subtitle:classes.subtitle\r\n              }}\r\n            />\r\n        </GridListTile>\r\n        <GridListTile>\r\n            <img src='https://www.publicdomainpictures.net/pictures/320000/velka/background-image.png' alt='adawdwadawd' />\r\n            <GridListTileBar\r\n              title={'75'}\r\n              subtitle={'SUNNY'}\r\n              classes={{\r\n                root: classes.titleBar,\r\n                title: classes.title,\r\n                subtitle:classes.subtitle\r\n              }}\r\n            />\r\n        </GridListTile>\r\n        <GridListTile>\r\n            <img src='https://www.publicdomainpictures.net/pictures/320000/velka/background-image.png' alt='adawdwadawd' />\r\n            <GridListTileBar\r\n              title={'75'}\r\n              subtitle={'SUNNY'}\r\n              classes={{\r\n                root: classes.titleBar,\r\n                title: classes.title,\r\n                subtitle:classes.subtitle\r\n              }}\r\n            />\r\n        </GridListTile>\r\n\r\n        \r\n      </GridList>\r\n    </div>\r\n  );\r\n}","import React,{useState,useEffect} from 'react';\nimport Forcast from './Forcast'\nconst api = {\n  key: '473cec06c66fc5846103e9a4b5117088',\n  base: 'https://api.openweathermap.org/data/2.5/'\n}\n\n\nfunction App() {\n\n  const [quary, setQuery] = useState('New York City')\n  const [weather, setWeather] = useState({})\n  const [location, setLocation] = useState({})\n\n  const  getLocation =() => {\n    if (window.navigator.geolocation) {\n      window.navigator.geolocation.getCurrentPosition(showPosition);\n    }\n  }\n\n  function showPosition(position) {\n    const temp = {\n      lat:position.coords.latitude,\n      lon:position.coords.longitude\n    }\n    setLocation(temp)\n    fetch(`${api.base}weather?lat=${temp.lat}&lon=${temp.lon}&units=metric&APPID=${api.key}`)\n    .then(res => res.json())\n    .then(result => {\n      setWeather(result)\n      setQuery('')\n    })\n  }\n \n\n  useEffect(()=>{\n    getLocation()\n   \n    getData()\n  },[])\n  \n  if(typeof weather.main != 'undefined'){\n    console.log()\n  }\n\n  const getData = () =>{\n    fetch(`${api.base}weather?q=${quary}&units=metric&APPID=${api.key}`)\n        .then(res => res.json())\n        .then(result => {\n          setWeather(result)\n          setQuery('')\n        })\n  }\n\n  const search = evt =>{\n    if(evt.key === 'Enter'){\n      getData()\n    }\n  }\n\n  const dateBuilder = (d) =>{\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\n\n    let day = days[d.getDay()]\n    let date = d.getDate()\n    let month = months[d.getMonth()]\n    let year = d.getFullYear()\n\n    return `${day} ${date} ${month} ${year}`\n\n\n  }\n\n  return (\n    <div className={(typeof weather.main != 'undefined') ? ((weather.main.temp>16) ? 'app warm':'app'):'app'}>\n      \n      <div>\n        <main>\n          <div className ='search-box'>\n            <input  className = 'search-bar' placeholder='Search...' type='text' onChange={e =>setQuery(e.target.value)} value={quary} onKeyPress={search}/>\n          </div>\n          {(typeof weather.main != 'undefined') ?(\n            <div>\n              <div className=\"location-box\">\n                <div className='location'>{weather.name},{weather.sys.country}</div>\n                <div className='date'>{dateBuilder(new Date())}</div>\n              </div>\n              <div className='weather-box'>\n                <div className='temp'>{Math.round(weather.main.temp)}°c</div>\n                <div className='weather'>{weather.weather[0].main}</div>\n              </div>\n              \n\n            </div>):(  <div>\n              <div className=\"location-box\">\n                <div className='location'>CITY NOT FOUND</div>\n              </div>\n              </div>)}\n              <Forcast className='forcast'></Forcast>\n        </main>\n  \n\n      </div>\n\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}