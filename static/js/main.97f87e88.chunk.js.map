{"version":3,"sources":["Forcast.js","BottomNav.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","display","flexWrap","justifyContent","overflow","backgroundColor","marginTop","marginBottom","gridList","transform","height","title","fontSize","color","palette","primary","light","subtitle","titleBar","background","gridTileStyle","Forcast","props","classes","console","log","data","splice","className","GridList","cols","map","d","GridListTile","key","dt","src","alt","GridListTileBar","Math","round","main","temp","weather","Date","dt_txt","getDay","width","api","App","useState","quary","setQuery","setWeather","setLocation","unit","forecast","setForecast","getForecast","id","fetch","then","res","json","result","list","showPosition","position","lat","coords","latitude","lon","longitude","useEffect","window","navigator","geolocation","getCurrentPosition","getData","TextField","style","label","variant","onChange","e","target","value","onKeyPress","evt","name","sys","country","day","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Typography","component","length","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.97f87e88.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport GridList from '@material-ui/core/GridList';\r\nimport GridListTile from '@material-ui/core/GridListTile';\r\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    justifyContent: 'space-evenly',\r\n    overflow: 'hidden',\r\n    backgroundColor: 'rbga(0,0,0,0)',\r\n    marginTop:10,\r\n    marginBottom:10\r\n    \r\n  },\r\n  gridList: {\r\n    flexWrap: 'nowrap',\r\n    // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\r\n    transform: 'translateZ(0)',\r\n    height:200,\r\n  },\r\n  title: {\r\n    fontSize:'20px',\r\n    marginBottom:5,\r\n    color: theme.palette.primary.light,\r\n  },\r\n  subtitle:{\r\n    fontSize:'15px',\r\n  },\r\n  titleBar: {\r\n    \r\n    background:\r\n      'linear-gradient(to top, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)',\r\n  },\r\n  gridTileStyle:{\r\n      height:100 \r\n  }\r\n}));\r\n\r\nexport default function Forcast(props) {\r\n\r\n  const classes = useStyles();\r\n  console.log(props.data)\r\n  const data = props.data.splice(0,7)\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <GridList className={classes.gridList} cols={2.5}>\r\n        {data.map((d) => (\r\n             <GridListTile key={d.dt}>\r\n             <img src='https://www.publicdomainpictures.net/pictures/320000/velka/background-image.png' alt='adawdwadawd' />\r\n             <GridListTileBar\r\n               title={Math.round(d.main.temp)}\r\n               subtitle={(d.weather[0].main) + (new Date(d.dt_txt).getDay())}\r\n               classes={{\r\n                 root: classes.titleBar,\r\n                 title: classes.title,\r\n                 subtitle:classes.subtitle\r\n               }}\r\n             />\r\n             <div>\r\n                 Hi\r\n             </div>\r\n         </GridListTile>\r\n\r\n        ))}\r\n\r\n\r\n\r\n        \r\n      </GridList>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\r\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\r\nimport FolderIcon from '@material-ui/icons/Folder';\r\nimport RestoreIcon from '@material-ui/icons/Restore';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n});\r\n\r\nexport default function LabelBottomNavigation() {\r\n  const classes = useStyles();\r\n  const [value, setValue] = React.useState('recents');\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  return (\r\n    <BottomNavigation value={value} onChange={handleChange} className={classes.root}>\r\n      <BottomNavigationAction label=\"Recents\" value=\"recents\" icon={<RestoreIcon />} />\r\n      <BottomNavigationAction label=\"Favorites\" value=\"favorites\" icon={<FavoriteIcon />} />\r\n      <BottomNavigationAction label=\"Nearby\" value=\"nearby\" icon={<LocationOnIcon />} />\r\n      <BottomNavigationAction label=\"Folder\" value=\"folder\" icon={<FolderIcon />} />\r\n    </BottomNavigation>\r\n  );\r\n}","import React,{useState,useEffect} from 'react';\nimport Forcast from './Forcast'\nimport BotttomNav from './BottomNav'\nimport Typography from '@material-ui/core/Typography'\n\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport TextField from '@material-ui/core/TextField';\n\nconst api = {\n  key: '473cec06c66fc5846103e9a4b5117088',\n  base: 'https://api.openweathermap.org/data/2.5/'\n}\n\n\nfunction App() {\n\n  const [quary, setQuery] = useState('New York City')\n  const [weather, setWeather] = useState({})\n  const [location, setLocation] = useState({})\n  const [unit, setUnit] = useState('metric')\n  const [forecast,setForecast] = useState([])\n\n\n  const getForecast = (id) =>{\n      fetch(`${api.base}forecast/?id=${id}&units=${unit}&APPID=${api.key}`)\n      .then(res => res.json())\n      .then(result => {\n        setForecast(result.list)\n        console.log(forecast)\n      })\n    \n\n  }\n\n  const  getLocation =() => {\n    if (window.navigator.geolocation) {\n      window.navigator.geolocation.getCurrentPosition(showPosition);\n    }\n  }\n\n  function showPosition(position) {\n    const temp = {\n      lat:position.coords.latitude,\n      lon:position.coords.longitude\n    }\n    setLocation(temp)\n    fetch(`${api.base}weather?lat=${temp.lat}&lon=${temp.lon}&units=${unit}&APPID=${api.key}`)\n    .then(res => res.json())\n    .then(result => {\n      getForecast(result.id)\n      setWeather(result)\n      console.log(result)\n     \n      setQuery('')\n    })\n  }\n \n  useEffect(()=>{\n    getLocation()\n  getData()\n    //getForecast()\n\n    // setUnit('Imperial')\n    // setUnit('metric')\n    // getData()\n    // setUnit('Imperial')\n    // setUnit('metric')\n    // getData()\n    // setUnit('Imperial')\n    // setUnit('metric')\n    // getData()\n    // setUnit('Imperial')\n    // setUnit('metric')\n    // getData()\n\n  },[])\n\n\n  \n  \n\n  if(typeof weather.main != 'undefined'){\n  }\n\n  const getData = () =>{\n    fetch(`${api.base}weather?q=${quary}&units=${unit}&APPID=${api.key}`)\n        .then(res => res.json())\n        .then(result => {\n          setWeather(result)\n          getForecast(result.id)\n          setQuery('')\n        })\n  }\n\n  const search = evt =>{\n    if(evt.key === 'Enter'){\n      getData()\n    }\n  }\n\n\n\n  const dateBuilder = (d) =>{\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\n\n    let day = days[d.getDay()]\n    let date = d.getDate()\n    let month = months[d.getMonth()]\n    let year = d.getFullYear()\n\n    return `${day} ${date} ${month} ${year}`\n  }\n  const handleUnitChange = (e) =>{\n    // if(e.target.checked){\n    //   setUnit('Imperial')\n    //   getDataWithName(weather.name)\n    // }else{\n    //   setUnit('metric')\n    //   getDataWithName(weather.name)\n    // }\n  }\n\n  return (\n    <div className={(typeof weather.main != 'undefined') ? ((weather.main.temp>16) ? 'app warm':'app'):'app'}>\n      <div>\n        <main>\n          <div className ='search-box'>\n            <TextField className ='search-box' style={{width:'100%',}} id=\"standard-basic\"label=\"Search...\" variant=\"filled\"  onChange={e =>setQuery(e.target.value)} value={quary} onKeyPress={search}/>  \n            {/* <FormControlLabel\n              value=\"end\"\n              control={<Switch color=\"secondary\" />}\n              label=\"Imperial\"\n              labelPlacement=\"end\"\n              onChange={handleUnitChange}\n              checked={unit === 'Imperial'?true:false}\n             /> */}\n          </div>\n          {(typeof weather.main != 'undefined') ?(\n            <div>\n              <div className=\"location-box\">\n                <div className='location'>{weather.name},{weather.sys.country}</div>\n                <div className='date'>{dateBuilder(new Date())}</div>\n              </div>\n              <div className='weather-box'>\n              <div className='temp'>{Math.round(weather.main.temp)}°{unit === 'Imperial' ? 'F' : 'C'}</div>\n                <div className='weather'>{weather.weather[0].main}</div>\n              </div>\n\n              <div>\n              <Typography variant=\"h6\" component=\"h3\" style={{color:'white',marginBottom:'-2%'}}>FORECAST:</Typography>\n              {forecast.length >0?<Forcast data={forecast}style={{marginTop:0}}></Forcast>:null}\n              </div>\n              \n\n            </div>):(  <div>\n              <div className=\"location-box\">\n                <div className='location'>CITY NOT FOUND</div>\n              </div>\n              </div>)}\n        </main>\n\n      </div>\n      \n\n\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}